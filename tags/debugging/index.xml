<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>debugging on Dvir Segal&#39;s blog</title>
    <link>http://dvirsegal.github.io/tags/debugging/</link>
    <description>Recent content in debugging on Dvir Segal&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 05 Feb 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://dvirsegal.github.io/tags/debugging/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fusion Log Viewer: The binocular to assembly binding</title>
      <link>http://dvirsegal.github.io/posts/fusion-log-viewer-the-binocular-to-assembly-binding-4fe0/</link>
      <pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate>
      <guid>http://dvirsegal.github.io/posts/fusion-log-viewer-the-binocular-to-assembly-binding-4fe0/</guid>
      <description>Investigating .NET assembly loading (binding) issues&#xD;Link to heading&#xD;Once in a while, you encounter that peculiar problem when you run your application and receive an exception saying TypeLoadException or FileNotFoundException even though the DLLs that your application relies on, are right there!&#xA;The first suspect that may jump to your head is an assembly binding issue since it happens at the moment you run your application. It might be a mix of old DLLs with new ones, mismatch in version numbers or cultures, missing assemblies at the applicationâ€™s folder, or even a probing failure, either of eachâ€Šâ€”â€Šfusion log viewer can assist in identifying the case.</description>
    </item>
    <item>
      <title>OzCode: A New Way to Debug Your Code</title>
      <link>http://dvirsegal.github.io/posts/ozcode-a-new-way-to-debug-your-code-l6n/</link>
      <pubDate>Tue, 24 Dec 2019 00:00:00 +0000</pubDate>
      <guid>http://dvirsegal.github.io/posts/ozcode-a-new-way-to-debug-your-code-l6n/</guid>
      <description>Back in 2016, I saw a demo at a conference about a new visual studio extension that presumes to change the way an engineer debugs, they called it, magic debugging. Little that I know, it turned my debugging way of thinking upside down, indeed a magical approach.&#xA;Before Iâ€™ll continue, I owe a disclaimer for the readers. A previous colleague of mine is one of OzCodeâ€™s co-founders (Omer Raviv). Although it might harm the credibility of this blog-post, Iâ€™ll take the risk; for the reason that these lines were written by a happy user ðŸ¤“.</description>
    </item>
    <item>
      <title>Snoop Around Your Visual Tree</title>
      <link>http://dvirsegal.github.io/posts/snoop-around-your-visual-tree-c6c/</link>
      <pubDate>Thu, 20 Jun 2019 00:00:00 +0000</pubDate>
      <guid>http://dvirsegal.github.io/posts/snoop-around-your-visual-tree-c6c/</guid>
      <description>Binding issues? Struggle with that hard to solve UI bug? Trying to understand how to fit the entire string into TextBoxâ€™s dimensions? These situations and many others are common for us,Â .NET and WPF developers.&#xA;Most of the times, issues, as mentioned above, are solved by using a debugger.&#xA;Imagine it; you want to change the size of a specific graphic element. Well, you open the relevant project (using Everything tool ðŸ˜‰) in your favorite IDE, make some changes, compile, deploy, and rerun the application.</description>
    </item>
  </channel>
</rss>
