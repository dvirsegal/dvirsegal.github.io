<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>softwareengineering on dvirsegal</title>
    <link>http://dvirsegal.github.io/tags/softwareengineering/</link>
    <description>Recent content in softwareengineering on dvirsegal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 09 Nov 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://dvirsegal.github.io/tags/softwareengineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Failing fast to increase feedback loops</title>
      <link>http://dvirsegal.github.io/posts/failing-fast-to-increase-feedback-loops-6d08f013fa9b/</link>
      <pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate>
      <guid>http://dvirsegal.github.io/posts/failing-fast-to-increase-feedback-loops-6d08f013fa9b/</guid>
      <description>How we used integration tests to improve confidence in our code&#xD;Link to heading&#xD;Picture this: your product owner brings you a set of new requirements, and together you review them. After some preparation and initial work, you get your design reviewed and approved by relevant stakeholders. Then, you enter your focus zone and start implementing it. While doing so, you want to gain confidence, so you add tons of unit tests to cover it, manually test it, and refactor your code based on your tests&amp;rsquo; results until you feel comfortable with the outcome.</description>
    </item>
    <item>
      <title>How to organize a drawer the right way?</title>
      <link>http://dvirsegal.github.io/posts/how-to-organize-a-drawer-the-right-way-4db782c07976/</link>
      <pubDate>Sun, 30 Oct 2022 00:00:00 +0000</pubDate>
      <guid>http://dvirsegal.github.io/posts/how-to-organize-a-drawer-the-right-way-4db782c07976/</guid>
      <description>Or let‚Äôs talk about cohesion&#xD;Link to heading&#xD;TL;DR To make a system cohesive, you must ensure that the parts that go together are close to one another.&#xA;I sometimes find that the cohesion (and coupling) concept is often considered way too academic, and developers tend to talk about other well-known concepts, such as DRY, YAGNI, KISS, and SRP. The list is long, and I can continue with more acronyms all day üòÇ So, I‚Äôve chosen to challenge myself and simplify it.</description>
    </item>
    <item>
      <title>In the quest for growth material</title>
      <link>http://dvirsegal.github.io/posts/in-the-quest-for-growth-material-1mfk/</link>
      <pubDate>Sat, 26 Mar 2022 00:00:00 +0000</pubDate>
      <guid>http://dvirsegal.github.io/posts/in-the-quest-for-growth-material-1mfk/</guid>
      <description>Various methods I use to gain new knowledge&#xD;Link to heading&#xD;A few years ago, I started my journey; picture this, a recent undergraduate SW engineer on his first full-time day job. My team mainly consisted of seniors; I saw those ‚Äúgiants‚Äù that both have vast product knowledge and tons of it in software development. They even found the time to be up to date with general tech news. I thought to myself, how do they do that?</description>
    </item>
    <item>
      <title>How to deal with the kitchen sink syndrome</title>
      <link>http://dvirsegal.github.io/posts/how-to-deal-with-the-kitchen-sink-syndrome-51ap/</link>
      <pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate>
      <guid>http://dvirsegal.github.io/posts/how-to-deal-with-the-kitchen-sink-syndrome-51ap/</guid>
      <description>But I‚Äôm a (scope) creep‚Ä¶what the hell am I doin‚Äô here?&#xD;Link to heading&#xD;Here is a situation that I am pretty sure every team or individual contributor has encountered throughout his career. You get well-defined requirements, review them, ask questions, adjust them with your product owner, and prepared one heck of SW design. Soon after, the implementation phase begins, and a few hours or days before the end of the story, the business calls and asks for an extra feature (or change) to be implemented.</description>
    </item>
    <item>
      <title>How to cope with a difficult colleague</title>
      <link>http://dvirsegal.github.io/posts/how-to-cope-with-a-difficult-colleague-456/</link>
      <pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate>
      <guid>http://dvirsegal.github.io/posts/how-to-cope-with-a-difficult-colleague-456/</guid>
      <description>It‚Äôs complicated; Dealing with workplace drama.&#xD;Link to heading&#xD;Everybody, at some point, will encounter a challenging colleague. Being able to deal with a person like that is part of developing conflict resolution skills and learning to overcome those setbacks.&#xA;In the following paragraphs, I will try to illustrate how I deal with these situations.&#xA;What do you mean by difficult people? ü§î&#xD;Link to heading&#xD;To be honest, we have to know that not everyone we struggle with is someone who tries to give us a hard time, as every relationship will have friction moments.</description>
    </item>
    <item>
      <title>Is premature optimization really the root of all evil?</title>
      <link>http://dvirsegal.github.io/posts/is-premature-optimization-really-the-root-of-all-evil-35d9/</link>
      <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
      <guid>http://dvirsegal.github.io/posts/is-premature-optimization-really-the-root-of-all-evil-35d9/</guid>
      <description>First, make it right. Then make it fast.&#xD;Link to heading&#xD;Premature Optimization&#xA;Back in the seventies, Knuth wrote the above quote in his paper ‚ÄúStructured Programming with go to Statement‚Äù at times when computational power was slower and expensive than nowadays. Nevertheless, it doesn‚Äôt mean you shouldn‚Äôt take it in your consideration. Note that the quote doesn&amp;rsquo;t stand for itself, and to get its true meaning, you should read the paragraph that follows this famous saying:</description>
    </item>
    <item>
      <title>How demo-oriented programming makes you better</title>
      <link>http://dvirsegal.github.io/posts/how-demo-oriented-programming-makes-you-better-44mo/</link>
      <pubDate>Thu, 26 Nov 2020 00:00:00 +0000</pubDate>
      <guid>http://dvirsegal.github.io/posts/how-demo-oriented-programming-makes-you-better-44mo/</guid>
      <description>On the focused effort of making a working prototype&#xD;Link to heading&#xD;There are many ways you can determine whether a new feature will add value to the product or turn out to be a complete waste of time. For instance, you can undertake user research, analyze the demands of the market, and study existing solutions. However, we (developers) have a fantastic tool in our sleeves: Developing a running project that demonstrates the proposed solution‚Äôs key ideas is your optimal option‚Ää‚Äî‚Ääin my opinion.</description>
    </item>
    <item>
      <title>Everybody was cargo culting</title>
      <link>http://dvirsegal.github.io/posts/everybody-was-cargo-culting-46n5/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      <guid>http://dvirsegal.github.io/posts/everybody-was-cargo-culting-46n5/</guid>
      <description>My personal experience to jump off the bandwagon (effect)&#xD;Link to heading&#xD;Imagine the following situation. One of your experienced colleagues talks about doing some work, which she‚Äôs passionate about and sure it will provide better results for the team. She has fire in her eyes when she talks about replacing technology X with Y.&#xA;You feel it right into your heart. Your colleagues seem to agree with her. She‚Äôs so right.</description>
    </item>
    <item>
      <title>Diving into the deep code waters</title>
      <link>http://dvirsegal.github.io/posts/diving-into-the-deep-code-waters-57p9/</link>
      <pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://dvirsegal.github.io/posts/diving-into-the-deep-code-waters-57p9/</guid>
      <description>Tools and techniques for exploring an unknown (large) codebase&#xD;Link to heading&#xD;You‚Äôve received a new responsibility or walked into a new job where there is existing code to work with. The source control has been introduced to you, realizing you have a lot to learn. Now what? Asking yourself, how should I become acquainted with the new codebase? Which for some, may be intimidating. Below I‚Äôll attempt to illustrate my techniques for getting familiarity with the code, leading to structured knowledge.</description>
    </item>
    <item>
      <title>Code comments are your code autobiography</title>
      <link>http://dvirsegal.github.io/posts/code-comments-are-your-code-autobiography-3c7n/</link>
      <pubDate>Thu, 25 Jul 2019 00:00:00 +0000</pubDate>
      <guid>http://dvirsegal.github.io/posts/code-comments-are-your-code-autobiography-3c7n/</guid>
      <description>Writing about your code is redundant; the code is all you need. I can invest my time on unit tests or develop other features, and other excuses of why writing code comments is a waste of time. It‚Äôs a common belief among developers.&#xA;Well, you‚Äôve invested all your efforts in cultivating the design of your code, why should you comment it, right? As a result, code documentation is either absent or useless.</description>
    </item>
  </channel>
</rss>
